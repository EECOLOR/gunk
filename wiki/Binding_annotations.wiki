= Binding Annotations =

Occasionally you'll want multiple bindings for a same type. For example, you might want both a PayPal credit card processor and a Google Checkout processor. To enable this, bindings support an optional binding annotation. The annotation and type together uniquely identify a binding. This pair is called a key. 

Defining a binding annotation requires a few lines of code. You need to create an instance that implements {{{IAnnotation}}}. A simple annotation can be created like this:

{{{
public class PayPal extends AbstractAnnotation
{
  public function PayPal()
  {
    super(null, null);
  }
}
}}}

To depend on the annotated binding, apply the annotation to the injected argument:

{{{
public class RealBillingService implements BillingService 
{

  @Inject
  public RealBillingService(@PayPal CreditCardProcessor processor,
      TransactionLog transactionLog) {
    ...
  }
}

Lastly we create a binding that uses the annotation. This uses the optional annotatedWith clause in the bind() statement: 
    bind(CreditCardProcessor.class)
        .annotatedWith(PayPal.class)
        .to(PayPalCreditCardProcessor.class);
== @Named ==

Guice comes with a built-in binding annotation @Named that uses a string: 
public class RealBillingService implements BillingService {

  @Inject
  public RealBillingService(@Named("Checkout") CreditCardProcessor processor,
      TransactionLog transactionLog) {
    ...
  }

To bind a specific name, use Names.named() to create an instance to pass to annotatedWith: 
    bind(CreditCardProcessor.class)
        .annotatedWith(Names.named("Checkout"))
        .to(CheckoutCreditCardProcessor.class);

Since the compiler can't check the string, we recommend using @Named sparingly. 
Binding Annotations with Attributes

Guice supports binding annotations that have attribute values. In the rare case that you need such an annotation: 
Create the annotation @interface. 
Create a class that implements the annotation interface. Follow the guidelines for equals() and hashCode() specified in the Annotation Javadoc. Pass an instance of this to the annotatedWith() binding clause.
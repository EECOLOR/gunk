#summary Describes the differences with Guice

*Table of contents*
<wiki:toc max_depth="2" />

= Naming conventions =

This is an !ActionScript library and the Flash player itself prefixes interfaces with an 'I'. This is the reason the names of interfaces all start with an 'I'.

= !ActionScript limitations =

!ActionScript has (compared to Java) a few limitations, most of them regarding annotations and generics.

== Annotations ==

Annotations in !ActionScript are quite different from Java. In ActionScript they are nothing more than a piece of XML that is kept at runtime. In order to have a tiny bit of typing available when dealing with annotations Gunk requires annotations to be real objects of type {{{IAnnotation}}} (see the ASDoc for more details).

This means that the {{{[Type]}}} or {{{[Named]}}} annotation are represented by classes with the names Type and Named.

{{{
[Name("defaultValue", key1 = "value1", key2 = "value2")]
}}}

Is converted to this structure:

{{{
object (type derived from Name)
 |__ defaultValue: "defaultValue"
 |__ values (type IMap)
       |__ key1: "value1"
       |__ key2: "value2"
}}}

== Argument annotations ==

The concept of argument annotations does not exist in !ActionScript. Gunk therefore introduces an arguments annotation. An examples:

This example:
{{{
[Arguments(0="[Named('name')]")]
public function methodName(argument1:Object):void
{
  ...
}
}}}
will be treated as:
{{{
public function methodName([Named("name")] argument1:Object):void
{
  ...
}
}}}

== Constructor annotations ==

For some odd reason these are not retained by {{{describeType()}}}. Gunk therefor introduces a constructor annotation. The contents of the constructor annotation will be treated as if they were placed at the constructor. Some examples:

This example:
{{{
[Constructor("[Inject]")]
class MyClass
{
  ...
}
}}}
will be treated as:
{{{
class MyClass
{
  [Inject]
  public function MyClass()
  {
  }
}
}}}

This example:
{{{
[Constructor("[Inject]", 0="[Named('name')]")]
class MyClass
{
  public function MyClass(argument1:Object)
  {
  }
}
}}}
will be treated as:
{{{
class MyClass
{
  [Inject]
  public function MyClass([Named("name")] argument1:Object)
  {
  }
}
}}}

= Provider injection =

The lack of proper generics in !ActionScript forces Gunk to introduce a type annotation. A few examples:

{{{
[Inject]
[Type("package.Classname")]
public var provider:IProvider;
}}}

{{{
[Constructor("[Inject]", 0="[Type('package.Classname')]")]
public class MyClass
{
  public function MyClass(provider:IProvider)
  {
  }
}
}}}

= Unimplemented =

If you want any of these implemented, make your case in an issue.

== Eager singletons ==

Guice likes eager singletons, Gunk does not currently support it. 

== Stage ==

To keep the first version simple, the concept of a Stage has not been implemented.

== Binding for the Logger ==

!ActionScript does not have a {{{Logger}}} class like Java does.

== Constructor bindings ==

They are new in 3 and I missed them when creating the code.